给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3

思路：找到一个1就+1，然后开始左上右下搜索，把相邻的1置为0.

func numIslands(grid [][]byte) int {
    r := len(grid)
    c := len(grid[0])
    count := 0
    for i := 0; i < r;i++ {
        for j := 0; j < c;j++ {
            if (grid[i][j] - '0' == 1) {
                count++
                dfs(grid,i,j,r,c)
            }
        }
    }
    return count
}

func dfs(grid [][]byte,i int,j int,r int,c int) {
    grid[i][j] -= grid[i][j]
    if i >= 1 && grid[i-1][j] - '0' == 1 {
        dfs(grid,i-1,j,r,c)
    }

    if i + 1 < r && grid[i+1][j] - '0' == 1 {
        dfs(grid,i+1,j,r,c)
    }

    if j + 1 < c && grid[i][j+1] - '0' == 1 {
        dfs(grid,i,j+1,r,c)
    }

    if j  >= 1 && grid[i][j-1] - '0' == 1 {
        dfs(grid,i,j-1,r,c)
    }

}