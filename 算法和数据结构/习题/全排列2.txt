思路：先排序，然后递归找到所有排列，找的过程中进行剪枝操作：1.已经选过的不能选 2.没有选过，但与前一个元素相同，且前一个元素没选过
就continue去重，不再选择。

func permuteUnique(nums []int) [][]int {
    r := []int{}
    result := [][]int{}
    sort.Sort(sort.IntSlice(nums))
    vis := make([]bool, len(nums))
    dfs(nums, &r, vis, &result)
    return result
}


func dfs(nums []int, r *[]int, vis []bool, result *[][]int) {
    lenOfNums := len(nums)
    if lenOfNums == len(*r) {
        tmp := make([]int, lenOfNums)
        copy(tmp, *r)
        *result = append(*result, tmp)
        return 
    }
    
    for i := 0; i < lenOfNums; i++ {
        // 之前已经选过的就不选了
        if (vis[i]) {
            continue
        }
        // 没有选过的，并且与之前一样就不可选
        if i > 0 && !vis[i -1] && nums[i] == nums[i-1] {
            continue
        }
        vis[i] = true
        *r = append(*r, nums[i])
        dfs(nums, r, vis, result)
        // 本轮判断中要还原
        vis[i] = false
        *r = (*r)[:len(*r)-1]   
    }
}