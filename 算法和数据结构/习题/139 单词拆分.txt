输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。

思路：动态规划，使用dp[i]表示字符串s从0到i的子串，是否是可以用wordDict中的元素组成。
那么只要有 dp[i - 1] 为true 则，且s[i]在wordDict中，就满足；同理dp[i-2]为true, s[i-1: i+1]在wordDict中也满足。
即dp[i] = any(dp[i-1] && s[i - 0:i +1] ,  dp[i-2] && s[i-1 : i+1], .... dp[0] && s[1: i+1])

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int len = s.length();
        boolean[] dp = new boolean[len];
        Set<String> set = new HashSet<>(wordDict);
        dp[0] = set.contains(s.charAt(0) + "");
        for (int i = 1; i < len; i++) {
            if (set.contains(s.substring(0, i + 1))) {
                dp[i] = true;
                continue;
            }
            for (int j = i; j > 0 ; j--) {
                if (dp[j-1] && set.contains(s.substring(j, i + 1))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[len - 1];
    }
}