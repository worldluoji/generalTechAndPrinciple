思路：先看有没有环，有环则找到相遇的节点的下一个节点p。
然后让q=head,  p和q一步一步遍历，相遇的节点就是交叉点。

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func detectCycle(head *ListNode) *ListNode {
    node := findMeetNode(head)
    if node == nil {
        return nil
    }
    q := head
    for {
        if node == q {
            return node
        }
        node = node.Next
        q = q.Next
    }
    return nil
}

func findMeetNode(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return nil
    }
    node1 := head
    node2 := head.Next
    for {
        if node1 == nil || node2 == nil {
            break
        }
        if node1 == node2 {
            return node1.Next
        }
        node1 = node1.Next
        node2 = node2.Next
        if node2 != nil {
            node2 = node2.Next
        }
    }
    return nil
}