编写一段程序来查找第 n 个超级丑数。

超级丑数是指其所有质因数都是长度为?k?的质数列表?primes?中的正整数。

示例:

输入: n = 12, primes = [2,7,13,19]
输出: 32 
解释: 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。

思路1：建立一个最小堆，每次从堆顶取出最小的数，然后将prime中的数与最小的数相乘，放到最小堆中，注意要去重
比如63 = 9*7，也等于21*3。 但是会超时：

class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return primes[0];
        }
        PriorityQueue<Integer> queue = new PriorityQueue<>();
        Set<Integer> visited = new HashSet<Integer>();
        queue.offer(primes[0]);
        int lens = primes.length;
        int count = 2;
        int i = 1;
        while (!queue.isEmpty()) {
            int v = queue.poll();
            for (int j = i-1; j >= 0; j--) {
                int temp = v*primes[j];
                if (!visited.contains(temp)) {
                    visited.add(temp);
                    queue.offer(temp);
                }
            }
            int db = queue.peek();
            if (i < lens) {
                if (db > primes[i]) {
                    queue.offer(primes[i]);
                    i++;
                } else if (db == primes[i]) {
                    i++;
                }
            }
            
            count++;
            if (count == n) {
                return queue.peek();
            }
        }
        return -1;
    }
}


思路2：动态规划

class Solution {

    public int nthSuperUglyNumber(int n, int[] primes) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return primes[0];
        }
        int k = primes.length;
        // dp[i]表示第i个满足条件的超级丑数
        int[] dp = new int[n];
        // dpIndexs表示是这个素数已经和dp中的哪个位置结合了，下一个位置的坐标是多少
        int[] dpIndexs = new int[k];
        dp[0] = 1;
        // 因为要找第n个超级丑数，进行n-1次遍历，第一个固定是1
        for (int i = 1; i < n; i++) {
            // 对每个primes中的素数，与已经找到的超级丑数相乘，找next最小的那个
            int min = Integer.MAX_VALUE;
            for (int j = 0; j < k; j++) {
                int val = dp[dpIndexs[j]] * primes[j];
                if (min > val) {
                    min = val;
                }
            }
            dp[i] = min;
            for (int j = 0; j < k; j++) {
                if (min == dp[dpIndexs[j]] * primes[j]) {
                    dpIndexs[j]++;
                    // 不能break， 因为可能乘积会重复
                }
            }
        }
        return dp[n-1];
    }
}