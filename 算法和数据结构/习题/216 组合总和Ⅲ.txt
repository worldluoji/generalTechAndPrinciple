找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。

说明：

所有数字都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: k = 3, n = 7
输出: [[1,2,4]]
示例 2:

输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]

思路：dfs, 每次要么选，要么不选，不存在重复的，相对会比较容易。注意组合中数字只能是1-9，要限制。


class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(new HashSet<>(), 0, 1, k, n, res);
        return res;
    }

    private void dfs(Set<Integer> currentSet, int current, int num, int k, int n, List<List<Integer>> res) {
        if (current == n && currentSet.size() == k) {
            List<Integer> item = new ArrayList<>();
            item.addAll(currentSet);
            res.add(item);
            return;
        }
      
        int limit = n > 9 ? 9:n;
        if (num > limit || current > n || currentSet.size() > k) {
            return;
        }
        
        // select num
        currentSet.add(num);
        dfs(currentSet, current + num, num + 1, k, n, res);
        // not select num
        currentSet.remove(num);
        dfs(currentSet, current, num + 1, k, n, res);           
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        List<List<Integer>> res = s.combinationSum3(3, 18);
        System.out.println(res);
    }
}