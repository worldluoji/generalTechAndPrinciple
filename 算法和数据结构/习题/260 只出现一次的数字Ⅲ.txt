因为数组中只有两个数（num1,num2）不同，要把它们找出来，那么求异或(^)后，实际就是num1 ^ num2的结果，
因为num1和num2必然不一样，就一定有一位是1，比如3和5，二进制011和101，从右到左比较第二位就是不同的。
那么我们按照二进制第二位是否为1作为分组标准，进行异或，得到的两个数就是要找的num1和num2。

func singleNumber(nums []int) []int {
    xor := 0
    n := len(nums)
    for i := 0; i < n; i++ {
        xor ^= nums[i]
    }

    diff_bit := 1
    for {
        if xor == 0 {
            break
        }
        if xor & 1 == 0 {
            xor = xor >> 1
            diff_bit = diff_bit << 1
        } else {
            break
        }
    }
    num1 := 0
    num2 := 0
    for i := 0; i < n; i++ {
        if nums[i] & diff_bit == 0 {
            num1 ^= nums[i]
        } else {
            num2 ^= nums[i]
        }
    }
    res := make([]int, 2)
    res[0] = num1
    res[1] = num2
    return res
}