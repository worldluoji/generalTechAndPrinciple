输入：candidates = [2,3,6,7], target = 7,
所求解集为：
[
  [7],
  [2,2,3]
]
主要思想就是下面的start。比如第一个先选了2，后续递归就会包含2，2，3这组解；那么第一个选3的时候，就不能再选2了。
先排序，则通过start下标自动过滤掉了重复解。

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        LinkedList<Integer> linkedList = new LinkedList<>();
        Arrays.sort(candidates);
        dfs(candidates, target, 0, linkedList, res);
        return res;
    }

    private int dfs(int[] candidates, int target, int start, LinkedList<Integer> r, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList(r));
            return -1;
        } else if (target < 0) {
            return -1;
        }

        int len = candidates.length;
        for (int i = start; i < len; i++) {
            r.push(candidates[i]);
            if (dfs(candidates, target - candidates[i], i, r, res) == -1) {
                r.pop();
                break;
            }
            r.pop();
        }
        return 0;
    }
}