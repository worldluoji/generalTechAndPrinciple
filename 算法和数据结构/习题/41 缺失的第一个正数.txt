示例 1：
输入：nums = [1,2,0]
输出：3

思路：
第一遍把所有负数换成n + 1， 因为n个数，缺失的数一定是在1-n之间。
第二遍，将出现的数的绝对值对应的位置的数置为负
第三遍，不是负数就输出位置。

func firstMissingPositive(nums []int) int {
    n := len(nums)
    if n == 0 {
        return 1
    }
    maxNum := n + 1
    for i := 0; i < n; i++ {
        if nums[i] <= 0 {
            nums[i] = maxNum
        }
    }

    for i := 0; i < n; i++ {
        if nums[i] < maxNum {
            var index int
            if nums[i] < 0 {
                index = -1 * nums[i]
            } else {
                index = nums[i]
            }
            if index < maxNum  && nums[index - 1] > 0 {
                nums[index - 1] = -1 * nums[index - 1]
            }
        }
    }

    //fmt.Println(nums, maxNum)
    for i := 0; i < n; i++ {
        if nums[i] > 0 {
            return i + 1
        }
    }
    return maxNum
}