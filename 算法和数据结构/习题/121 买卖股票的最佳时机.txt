买卖股票的最佳时机Ⅰ： 只能买1次，并且只能卖1次。
输入：[7,1,5,3,6,4]
输出：5
解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票

思路: 当天买卖利润肯定为0，所以最大利润一定不会小于0，至少都是0。 当天的最大利润 =  max{昨天的最大利润 + 当天的价格  - 昨天价格, 0}

func maxProfit(prices []int) int {
    // 前一天卖出可获得的最大利润
    lastDayProfit := 0
    profit := 0
    for i:=1;i<len(prices);i++ {
       temp := prices[i] - prices[i - 1] + lastDayProfit
       if temp > 0 {
           lastDayProfit = temp
           if temp > profit {
               profit = temp
           }
       } else {
           lastDayProfit = 0
       }
    }
    return profit
}

买卖股票的最佳时机 II: 可以进行多次交易
输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
?    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。

思路：用dp[i]开始前i天可以获取的最大利润，那么dp[i] = max(dp[i - 1] + prices[i] - prices[i - 1],  dp[i - 1])

func maxProfit(prices []int) int {
    n := len(prices)
    // dp[i]表示前i天可以获取得最大利润
    dp := make([]int, n)
    dp[0] = 0
    for i:=1;i<n;i++ {
       temp := prices[i] - prices[i - 1]
       if temp > 0 {
          dp[i] = dp[i - 1] + temp
       } else {
          dp[i] = dp[i - 1]
       }
    }
    return dp[n - 1]
}

