输入: [1,2,3,4]
输出: [24,12,8,6]
要求不使用除法，且时间复杂度空间复杂度为o(n)
解题思路：
计算每个数左边的数的乘积，计算每个数右边的数的乘积。
该数左边的数的乘积乘以该数右边数的乘积就是除去本身的乘积。

原数组：       [1       2       3       4]
左部分的乘积：   1            1      1*2       1*2*3
右部分的乘积： 2*3*4    3*4       4             1
结果：           1*2*3*4  1*3*4   1*2*4   1*2*3*1

func productExceptSelf(nums []int) []int {
    lens := len(nums)
    res := make([]int, lens)
    res[0] = 1
    right := make([]int, lens)
    right[lens - 1] = 1
    for i := 1; i < lens; i++ {
        res[i] = res[i - 1] * nums[i - 1]
        right[lens - i - 1] = right[lens - i] * nums[lens - i]
    }

    for i := 0; i < lens; i++ { 
        res[i] = res[i] * right[i]
    }

    return res
    
}