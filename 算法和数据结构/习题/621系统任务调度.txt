输入：tasks = ["A","A","A","B","B","B"], n = 2
输出：8
解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B
     在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。


func leastInterval(tasks []byte, n int) int {
   taskNums := len(tasks)
   counts := make([]int, 26)
   for _,task := range tasks {
       counts[task - 'A'] += 1
   }
   sort.Ints(counts)
   maxCount := counts[25]
   // AAABBC n=2 那么AXXAXXA正好满足下面的公式，B和C往“X”处插入即可
   retCount := (maxCount - 1) * (n + 1) + 1
   // AAABBBC n=2, 这时候可能B和A的个数一样，则AB是成对的（ABXABXAB），会多1，再把C填入空隙处哪里都行，ABCABXAB
   for i := 24; i >= 0; i-- {
       if counts[i] == maxCount {
           retCount += 1
       } else {
           break
       }
   }
   if retCount > taskNums {
       return retCount
   }
   return taskNums
}