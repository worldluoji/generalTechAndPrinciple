1. 操作系统的内核态和用户态
内核：本质上是一种软件，用于控制计算机的硬件资源，包括CPU、存储资源、IO等。内核有自己的空间概念，成为内核空间。
用户态：即上层应用程序的活动空间，应用程序必须依赖于内核提供的资源。
系统调用：为上层应用能访问到内核资源，而供上层应用访问的接口。比如C语言的malloc、printf函数就是封装了一些系统调用，成为了内核和用户态之间的桥梁。

2. 僵尸进程和孤儿进程的区别
孤儿进程：一个进程退出，而它的一个或多个子进程还在运行，那么这些子进程就成为孤儿进程；
         孤儿进程将被init进程所收养，并由init线程完成对它们的状态收集工作

僵尸进程：一个进程使用fork创建子进程，如果子进程退出，父进程因为没有调用wait或者waitpid获取子进程的状态信息，那么子进程的进程描述符仍然在系统中存在。
正常情况下，linux操作系统，子进程通过父进程创建，子进程的结束和父进程的运行是一个异步的过程，父进程无法预测子进程什么时候结束，当一个进程完成工作退出时，会释放内存等资源，但是不会将进程号、退出状态、运行时间等状态清除。子进程会向父进程发出SIGCHLD信号，父进程会调用wait或waitpid系统调用取得子进程的最终状态，才把前面的状态清除。

3. init进程
它是内核初始化完启动的第一个进程，这个进程会创建相应的系统服务，从而使系统正常运行

4. fork后发生了什么？
由fork创建出的进程被称为子进程，该函数调用一次，但返回两次，子进程返回0表示成功，父进程则返回子进程的进程ID。这样主要是因为一个父进程可以有多个子进程，这里父进程如果不获取子进程的进程ID，以后就不好获取了。 子进程可以通过getpid()获取自己的进程ID，通过getppid()获取父进程的ID。