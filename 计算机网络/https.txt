1. 对称加密和非对称加密
1）对称加密
加密和解密使用的密钥是相同的。也就是说，加密和解密使用的是同一个密钥。
因此，对称加密算法要保证安全性的话，密钥要做好保密。只能让使用的人知道，不能对外公开。

2）非对称加密
加密使用的密钥和解密使用的密钥是不相同的。一把是作为公开的公钥，另一把是作为谁都不能给的私钥。
公钥加密的信息，只有私钥才能解密。私钥加密的信息，只有公钥才能解密。

因为对称加密算法相比非对称加密算法来说，效率要高得多，性能也好，所以交互的场景下多用对称加密。

2. 数字证书
1）非对称加密，如何将不对称加密的公钥给对方呢？
一种是放在一个公网的地址上，让对方下载；另一种就是在建立连接的时候，传给对方。
但两种方法都有一个问题，就是如何鉴别别人给你的公钥是对的，因为有可能被仿冒。
这时候就需要一个权威，而这个由权威部门颁发的称为证书（Certificate）。

2）证书里面有什么呢？当然应该有公钥，这是最重要的；
还有证书的所有者，就像户口本上有你的姓名和身份证号，说明这个户口本是你的；
另外还有证书的发布机构和证书的有效期，这个有点像身份证上的机构是哪个区公安局，有效期到多少年。

3）如何生成证书
生成证书需要发起一个证书请求，然后将这个请求发给一个权威机构去认证，
这个权威机构我们称为 CA（ Certificate Authority）。

4）将这个请求发给权威机构，权威机构会给这个证书卡一个章，我们称为签名算法。
问题又来了，那怎么签名才能保证是真的权威机构签名的呢？
当然只有用只掌握在权威机构手里的东西签名了才行，这就是 CA 的私钥。

你不会从外卖网站上得到一个公钥，而是会得到一个证书，这个证书有个发布机构 CA，
你只要得到这个发布机构 CA 的公钥，去解密外卖网站证书的签名，
如果解密成功了，Hash 也对的上，就说明这个外卖网站的公钥没有啥问题。

5）怎么确定CA的公钥是对的？
要想知道某个 CA 的证书是否可靠，要看 CA 的上级证书的公钥，能不能解开这个 CA 的签名。
就像你不相信区公安局，可以打电话问市公安局，让市公安局确认区公安局的合法性。
这样层层上去，直到全球皆知的几个著名大 CA，称为 root CA，做最后的背书。
通过这种层层授信背书的方式，从而保证了非对称加密模式的正常运转。
除此之外，还有一种证书，称为 Self-Signed Certificate，就是自己给自己签名。
这个给人一种“我就是我，你爱信不信”的感觉。

3.HTTPS的工作模式
当你登录一个外卖网站的时候，由于是 HTTPS：
1）客户端会发送 Client Hello 消息到服务器，以明文传输 TLS 版本信息、加密套件候选列表、压缩算法候选列表等信息。
另外，还会有一个随机数A，在协商对称密钥的时候使用。
2）外卖网站返回 Server Hello 消息, 告诉客户端，服务器选择使用的协议版本、加密套件、压缩算法等，
还有一个随机数B，用于后续的密钥协商。
3）外卖网站会给你一个服务器端的证书，然后说：“Server Hello Done，我这里就这些信息了。”
4）你当然不相信这个证书，于是你从自己信任的 CA 仓库中，拿 CA 的证书里面的公钥去解密外卖网站的证书。
如果能够成功，则说明外卖网站是可信的。这个过程中，你可能会不断往上追溯 CA、CA 的 CA、CA 的 CA 的 CA，
反正直到一个授信的 CA，就可以了。
证书验证完毕之后，觉得这个外卖网站可信，于是客户端计算产生随机数字 Pre-master，
发送 Client Key Exchange，用证书中的公钥加密，再发送给服务器，服务器可以通过私钥解密出来。
5）到目前为止，无论是客户端还是服务器，都有了三个随机数：随机数A、随机数B，以及刚生成的 Pre-Master 随机数。
通过这三个随机数，可以在客户端和服务器产生相同的对称密钥。
有了对称密钥，客户端就可以说：“Change Cipher Spec，咱们以后都采用协商的通信密钥和加密算法进行加密通信了。”
6）然后发送一个 Encrypted Handshake Message，将已经商定好的参数等，采用协商密钥进行加密，
发送给服务器用于数据与握手验证。
同样，服务器也可以发送 Change Cipher Spec，说：“没问题，咱们以后都采用协商的通信密钥和加密算法进行加密通信了”，
并且也发送 Encrypted Handshake Message 的消息试试。当双方握手结束之后，就可以通过对称密钥进行加密传输了。

这个过程除了加密解密之外，其他的过程和 HTTP 是一样的，过程也非常复杂。
上面的过程只包含了 HTTPS 的单向认证，也即客户端验证服务端的证书，是大部分的场景。
也可以在更加严格安全要求的情况下，启用双向认证，双方互相验证证书。

4. 重放和防篡改
有了加密和解密，黑客截获了包也打不开了，但是它可以发送 N 次。
这个往往通过 Timestamp 和 Nonce 随机数联合起来，然后做一个不可逆的签名来保证。
Nonce 随机数保证唯一，或者 Timestamp 和 Nonce 合起来保证唯一，
同样的请求只接受一次，于是服务器多次收到相同的 Timestamp 和 Nonce，则视为无效即可。
如果有人想篡改 Timestamp 和 Nonce，还有签名保证不可篡改性，如果改了用签名算法解出来，就对不上了，可以丢弃了。

5. 各大CA机构的公钥是默认安装在操作系统里的。所以不要安装来路不明的操作系统，否则相当于裸奔。
